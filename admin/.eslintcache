[{"H:\\visual studio code\\react\\xiyuan\\admin\\src\\App.js":"1","H:\\visual studio code\\react\\xiyuan\\admin\\src\\base\\base.js":"2","H:\\visual studio code\\react\\xiyuan\\admin\\src\\page\\login\\index.jsx":"3","H:\\visual studio code\\react\\xiyuan\\admin\\src\\index.js":"4","H:\\visual studio code\\react\\xiyuan\\admin\\src\\router.js":"5","H:\\visual studio code\\react\\xiyuan\\admin\\src\\http\\base.js":"6","H:\\visual studio code\\react\\xiyuan\\admin\\src\\page\\index\\index.jsx":"7","H:\\visual studio code\\react\\xiyuan\\admin\\src\\page\\index\\router.js":"8","H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\article\\index.jsx":"9","H:\\visual studio code\\react\\xiyuan\\admin\\src\\http\\http.js":"10","H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\notify\\index.jsx":"11","H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\agument\\index.jsx":"12","H:\\visual studio code\\react\\xiyuan\\admin\\src\\http\\api.js":"13","H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\statistic\\index.jsx":"14","H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\feedback\\index.jsx":"15","H:\\visual studio code\\react\\xiyuan\\admin\\src\\components\\getandcopy\\index.jsx":"16","H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\adminusers\\index.jsx":"17","H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\adminusers\\addadmin\\index.jsx":"18","H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\admininfo\\index.jsx":"19","H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\admininfo\\updatepassword\\index.jsx":"20","H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\micorapp\\index.jsx":"21","H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\micorapp\\addMicor\\index.jsx":"22","H:\\visual studio code\\react\\xiyuan\\admin\\src\\components\\editable.jsx":"23"},{"size":989,"mtime":1608255974394,"results":"24","hashOfConfig":"25"},{"size":752,"mtime":1605259375707,"results":"26","hashOfConfig":"25"},{"size":2957,"mtime":1607930585228,"results":"27","hashOfConfig":"25"},{"size":231,"mtime":1607941611394,"results":"28","hashOfConfig":"25"},{"size":447,"mtime":1607938854283,"results":"29","hashOfConfig":"25"},{"size":1428,"mtime":1620095355689,"results":"30","hashOfConfig":"25"},{"size":5874,"mtime":1619853718013,"results":"31","hashOfConfig":"25"},{"size":1209,"mtime":1619853424424,"results":"32","hashOfConfig":"25"},{"size":17465,"mtime":1608179102858,"results":"33","hashOfConfig":"25"},{"size":431,"mtime":1606377542625,"results":"34","hashOfConfig":"25"},{"size":4499,"mtime":1608113378455,"results":"35","hashOfConfig":"25"},{"size":19484,"mtime":1608179168415,"results":"36","hashOfConfig":"25"},{"size":5014,"mtime":1620095355718,"results":"37","hashOfConfig":"25"},{"size":15995,"mtime":1620096414664,"results":"38","hashOfConfig":"25"},{"size":13185,"mtime":1608179677088,"results":"39","hashOfConfig":"25"},{"size":1641,"mtime":1608119163177,"results":"40","hashOfConfig":"25"},{"size":18086,"mtime":1620094252773,"results":"41","hashOfConfig":"25"},{"size":5325,"mtime":1608200415337,"results":"42","hashOfConfig":"25"},{"size":6428,"mtime":1608202535377,"results":"43","hashOfConfig":"25"},{"size":3254,"mtime":1608202867715,"results":"44","hashOfConfig":"25"},{"size":14254,"mtime":1620391704961,"results":"45","hashOfConfig":"25"},{"size":4612,"mtime":1619876970357,"results":"46","hashOfConfig":"25"},{"size":2183,"mtime":1620094207472,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"9o6w3d",{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"H:\\visual studio code\\react\\xiyuan\\admin\\src\\App.js",[],["108","109"],"H:\\visual studio code\\react\\xiyuan\\admin\\src\\base\\base.js",["110"],"//给时间对象添加一个格式化时间的原型方法\r\nDate.prototype.format = function (fmt) {\r\n    var o = {\r\n        \"M+\": this.getMonth() + 1, //月份\r\n        \"d+\": this.getDate(), //日\r\n        \"h+\": this.getHours(), //小时\r\n        \"m+\": this.getMinutes(), //分\r\n        \"s+\": this.getSeconds(), //秒\r\n        \"q+\": Math.floor((this.getMonth() + 3) / 3), //季度\r\n        \"S\": this.getMilliseconds() //毫秒\r\n    };\r\n    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + \"\").substr(4 - RegExp.$1.length));\r\n    for (var k in o)\r\n        if (new RegExp(\"(\" + k + \")\").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : ((\"00\" + o[k]).substr((\"\" + o[k]).length)));\r\n    return fmt;\r\n};",["111","112"],"H:\\visual studio code\\react\\xiyuan\\admin\\src\\page\\login\\index.jsx",[],"H:\\visual studio code\\react\\xiyuan\\admin\\src\\index.js",[],["113","114"],"H:\\visual studio code\\react\\xiyuan\\admin\\src\\router.js",[],["115","116"],"H:\\visual studio code\\react\\xiyuan\\admin\\src\\http\\base.js",[],"H:\\visual studio code\\react\\xiyuan\\admin\\src\\page\\index\\index.jsx",[],"H:\\visual studio code\\react\\xiyuan\\admin\\src\\page\\index\\router.js",[],["117","118"],"H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\article\\index.jsx",["119","120","121"],"import React from 'react';\r\nimport './index.css';\r\n\r\nimport {Table, Tooltip, Button, Input, Space, Popconfirm, message, Checkbox, Modal} from 'antd';\r\nimport { SearchOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\r\n\r\nimport Getandcopy from '../../components/getandcopy';\r\n\r\nimport api from '../../http/api.js';\r\n\r\nexport default class Article extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            columns:[],\r\n            dataSource:null,\r\n            selectedRowKeys:[],\r\n            selectedForbidKeys:[],\r\n            selectedPublicKeys:[],\r\n            current:1,\r\n            total:0,\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({\r\n            columns:this.initColumns()\r\n        });\r\n        this.serchData({page:1});\r\n    };\r\n    componentWillUnmount() {\r\n        this.setState = (state, callback) => {\r\n            return\r\n        }\r\n    }\r\n\r\n    //禁止一篇文章\r\n    forbid = (id)=>{\r\n        this.forbidorre([id], '禁止');\r\n    };\r\n    //解禁一篇文章\r\n    reforbid = (id)=>{\r\n        this.forbidorre([id], '发表');\r\n    };\r\n    forbidAll = ()=>{\r\n        Modal.confirm({\r\n            title: '确认禁止?',\r\n            icon: <ExclamationCircleOutlined />,\r\n            content: '确认将选择的所有文章禁止?',\r\n            okText:'确定',\r\n            onOk:() =>{\r\n                this.forbidorre(this.state.selectedPublicKeys, '禁止');\r\n            },\r\n            cancelText:'取消',\r\n        });\r\n    };\r\n    reForbidAll = ()=>{\r\n        Modal.confirm({\r\n            title: '确认解禁?',\r\n            icon: <ExclamationCircleOutlined />,\r\n            content: '确认将选择的所有文章解禁?',\r\n            okText:'确定',\r\n            onOk:() =>{\r\n                this.forbidorre(this.state.selectedForbidKeys, '发表');\r\n            },\r\n            cancelText:'取消',\r\n        });\r\n    };\r\n    getcounts = (callback)=>{\r\n        let selectCountArray = [];\r\n        this.filterForbid().forEach(value=>{\r\n            let index = this.state.dataSource.findIndex(v=>v.id==value);\r\n            if (index === -1)\r\n                return;\r\n            let aindex = selectCountArray.findIndex(v=>v===this.state.dataSource[index].usercount);\r\n            if (aindex === -1){\r\n                selectCountArray.push(this.state.dataSource[index].usercount);\r\n            }\r\n        });\r\n        callback(selectCountArray.join(','));\r\n    };\r\n    //将禁止的选择框筛选出来\r\n    filterForbid = ()=>{\r\n        return this.state.selectedRowKeys.filter(value=>{\r\n            let index = this.state.dataSource.findIndex(v=>v.id == value);\r\n            return this.state.dataSource[index].status !== '草稿';\r\n        });\r\n    };\r\n    //禁止和解禁某些文章\r\n    forbidorre = (ids, status)=>{\r\n        api.forbidarticle(JSON.stringify({id:ids.join(','), forbid:status}))\r\n            .then(res=>res.json())\r\n            .then(data=>{\r\n                if (data.status === 1){\r\n                    let dataSource = Array.from(this.state.dataSource, value=>{\r\n                        let index = ids.findIndex(v=>v==value.id);\r\n                        if (index === -1)\r\n                            return value;\r\n                        else\r\n                            return {...value,status}\r\n                    });\r\n                    let selectedForbidKeys = [];\r\n                    let selectedPublicKeys = [];\r\n                    if (status === '禁止'){\r\n                        if (ids.length===1){\r\n                            selectedForbidKeys = [...this.state.selectedForbidKeys];\r\n                            if (this.state.selectedPublicKeys.includes(ids[0])){\r\n                                selectedForbidKeys.push(ids[0])\r\n                            }\r\n                            selectedPublicKeys = this.state.selectedPublicKeys.filter(item=>item !== ids[0]);\r\n                        }\r\n                        else {\r\n                            selectedForbidKeys = [...this.state.selectedForbidKeys, ...this.state.selectedPublicKeys];\r\n                        }\r\n                    }\r\n                    else if (status === '发表') {\r\n                        if (ids.length===1){\r\n                            selectedPublicKeys = [...this.state.selectedPublicKeys];\r\n                            if (this.state.selectedForbidKeys.includes(ids[0])){\r\n                                selectedPublicKeys.push(ids[0])\r\n                            }\r\n                            selectedForbidKeys = this.state.selectedForbidKeys.filter(item=>item !== ids[0]);\r\n                        }\r\n                        else {\r\n                            selectedPublicKeys = [...this.state.selectedForbidKeys, ...this.state.selectedPublicKeys];\r\n                        }\r\n                    }\r\n                    this.setState({\r\n                        dataSource,\r\n                        selectedForbidKeys,\r\n                        selectedPublicKeys\r\n                    });\r\n                    message.destroy();\r\n                    message.success('操作成功!');\r\n                }\r\n                else {\r\n                    message.destroy();\r\n                    message.warning('操作失败!');\r\n                }\r\n            })\r\n            .catch(error=>{\r\n                message.destroy();\r\n                message.warning('操作失败!');\r\n            });\r\n    };\r\n\r\n    //改变选中\r\n    selectChange = (e, data)=>{\r\n        let selectedForbidKeys = [];\r\n        let selectedPublicKeys = [];\r\n        data.forEach(item=>{\r\n            if (item.status === '禁止')\r\n                selectedForbidKeys.push(item.id);\r\n            else if (item.status === '发表')\r\n                selectedPublicKeys.push(item.id);\r\n        });\r\n        this.setState({\r\n            selectedRowKeys:e,\r\n            selectedForbidKeys,\r\n            selectedPublicKeys\r\n        });\r\n    };\r\n    //渲染选择框\r\n    renderCell=(checked, record, index, originNode)=>{\r\n        return <Checkbox {...originNode.props} disabled={record.status==='草稿'}/>;\r\n    };\r\n    //表的任何地方发生变化\r\n    tableChange = (pagination, filters, sorter)=>{\r\n        let config = {};\r\n        //若是改变的页数，则以改变后的为准；若不是改变的页数，则表示过滤别的，需要将页数调整为1\r\n        if (this.state.current === pagination.current)\r\n            config.page = 1;\r\n        else\r\n            config.page = pagination.current;\r\n        //看过滤的哪些有值，将有值的作为过滤条件\r\n        for (let key in filters) {\r\n            if (filters[key]) {\r\n                if (key === 'lookuser'){\r\n                    let valueArray = filters[key][0].replace(/，/g,',').split(',');\r\n                    valueArray = Array.from(valueArray, v=>this.ctoe(v));\r\n                    config[key] = valueArray.join(',');\r\n                }\r\n                else\r\n                    config[key] = filters[key][0];\r\n            }\r\n        }\r\n        //看是否需要排序\r\n        if (sorter.order){\r\n            config.orderKey = sorter.columnKey;\r\n            config.order = sorter.order==='descend'?'desc':'asc';\r\n        }\r\n        this.serchData(config);\r\n    };\r\n    //搜索数据\r\n    serchData = (config)=>{\r\n        api.getarticle(config)\r\n            .then(res=>res.json())\r\n            .then(data=>{\r\n                if (data.status === 1){\r\n                    let dataSource = Array.from(data.data,v=>{\r\n                        v.key = v.id;\r\n                        v.time = (new Date(v.time)).format('yyyy-MM-dd hh:mm:ss');\r\n                        v.lookuser = this.etoc(v.lookuser);\r\n                        return v;\r\n                    });\r\n                    this.setState({\r\n                        dataSource,\r\n                        total:data.total,\r\n                        current:config.page\r\n                    });\r\n                }\r\n            })\r\n            .catch(error=>{});\r\n    };\r\n\r\n    //转换可见性\r\n    etoc = (e)=>{\r\n        let c = '';\r\n        switch (e) {\r\n            case 'all' :\r\n                c = '所有人';\r\n                break;\r\n            case 'onlyme' :\r\n                c = '仅自己';\r\n                break;\r\n            case 'online' :\r\n                c = '登录可见';\r\n                break;\r\n            default:\r\n                c = e;\r\n                break;\r\n        }\r\n        return c;\r\n    };\r\n    ctoe = (c)=>{\r\n        let e = '';\r\n        switch (c) {\r\n            case '所有人' :\r\n                e = 'all';\r\n                break;\r\n            case '仅自己' :\r\n                e = 'onlyme';\r\n                break;\r\n            case '登录可见' :\r\n                e = 'online';\r\n                break;\r\n            default:\r\n                e = c;\r\n                break;\r\n        }\r\n        return e;\r\n    };\r\n\r\n    //自定义过滤方式和图标等\r\n    getColumnSearchProps = title => ({\r\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n            <div style={{ padding: 8 }}>\r\n                <Input\r\n                    ref={node => {\r\n                        this.searchInput = node;\r\n                    }}\r\n                    placeholder={`搜索 ${title}`}\r\n                    value={selectedKeys[0]}\r\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n                    onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\r\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n                />\r\n                <Space>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        onClick={() => this.handleSearch(selectedKeys, confirm)}\r\n                        icon={<SearchOutlined />}\r\n                        size=\"small\"\r\n                        style={{ width: 90 }}\r\n                    >\r\n                        搜索\r\n                    </Button>\r\n                    <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n                        重置\r\n                    </Button>\r\n                </Space>\r\n            </div>\r\n        ),\r\n        filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n        onFilterDropdownVisibleChange: visible => {\r\n            if (visible) {\r\n                setTimeout(() => this.searchInput.select(), 100);\r\n            }\r\n        },\r\n    });\r\n    handleSearch = (selectedKeys, confirm) => {\r\n        confirm();\r\n    };\r\n    handleReset = clearFilters => {\r\n        clearFilters();\r\n    };\r\n\r\n    //初始化列名\r\n    initColumns = ()=>{\r\n        let columns = [\r\n            {\r\n                title: 'ID',\r\n                width: 100,\r\n                dataIndex: 'id',\r\n                key: 'id',\r\n                fixed: 'left',\r\n            },\r\n            {\r\n                title: '标题',\r\n                width: 100,\r\n                dataIndex: 'title',\r\n                key: 'title',\r\n                fixed: 'left',\r\n                ellipsis: {\r\n                    showTitle: false,\r\n                },\r\n                render: title => (\r\n                    <Tooltip placement=\"topLeft\" title={title}>\r\n                        {title}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: '发表人',\r\n                width: 100,\r\n                dataIndex: 'usercount',\r\n                key: 'usercount',\r\n                ...this.getColumnSearchProps('发表人'),\r\n            },\r\n            {\r\n                title: '地址',\r\n                width: 100,\r\n                dataIndex: 'url',\r\n                key: 'url',\r\n            },\r\n            {\r\n                title: '描述',\r\n                width: 150,\r\n                dataIndex: 'discription',\r\n                key: 'discription',\r\n                ellipsis: {\r\n                    showTitle: false,\r\n                },\r\n                render: discription => (\r\n                    <Tooltip placement=\"topLeft\" title={discription}>\r\n                        {discription}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: '分类',\r\n                width: 100,\r\n                dataIndex: 'category',\r\n                key: 'category',\r\n                ...this.getColumnSearchProps('分类'),\r\n            },\r\n            {\r\n                title: '状态',\r\n                width: 100,\r\n                dataIndex: 'status',\r\n                key: 'status',\r\n                ...this.getColumnSearchProps('状态'),\r\n            },\r\n            {\r\n                title: '可见性',\r\n                width: 100,\r\n                dataIndex: 'lookuser',\r\n                key: 'lookuser',\r\n                ...this.getColumnSearchProps('可见性'),\r\n            },\r\n            {\r\n                title: '发表时间',\r\n                width: 150,\r\n                dataIndex: 'time',\r\n                key: 'time',\r\n                sorter:true,\r\n                defaultSortOrder:'descend',\r\n                showSorterTooltip:false,\r\n            },\r\n            {\r\n                title: '版本',\r\n                width: 70,\r\n                dataIndex: 'version',\r\n                key: 'version',\r\n                ...this.getColumnSearchProps('版本'),\r\n            },\r\n            {\r\n                title: '点赞数',\r\n                width: 80,\r\n                dataIndex: 'likeCount',\r\n                key: 'likeCount',\r\n                sorter:true,\r\n                showSorterTooltip:false,\r\n            },\r\n            {\r\n                title: '评论数',\r\n                width: 80,\r\n                dataIndex: 'agumentCount',\r\n                key: 'agumentCount',\r\n                sorter:true,\r\n                showSorterTooltip:false,\r\n            },\r\n            {\r\n                title: '操作',\r\n                key: 'action',\r\n                width: 65,\r\n                render: (text, record) => (\r\n                    record.status!=='草稿'&&(record.status==='禁止'?\r\n                        <Popconfirm\r\n                            title=\"确认解禁该文章?\"\r\n                            onConfirm={() => this.reforbid(record.key)}\r\n                            cancelText='取消'\r\n                            okText='确定'\r\n                        >\r\n                            <Button\r\n                                size='small'\r\n                                type='primary'\r\n                            >解禁</Button>\r\n                        </Popconfirm>\r\n                :\r\n                    <Popconfirm\r\n                        title=\"确认禁止该文章?\"\r\n                        onConfirm={() => this.forbid(record.key)}\r\n                        cancelText='取消'\r\n                        okText='确定'\r\n                    >\r\n                        <Button\r\n                            size='small'\r\n                            type='danger'\r\n                        >禁止</Button>\r\n                    </Popconfirm>)\r\n                ),\r\n                fixed:'right'\r\n            },\r\n        ];\r\n        return columns;\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='btn-box'>\r\n                    <Getandcopy\r\n                        getcontent={this.getcounts}\r\n                        disabled={this.state.selectedRowKeys.length===0}\r\n                        btntext='获取所选账户'\r\n                    />\r\n                    <div>\r\n                        <Button\r\n                            onClick={this.forbidAll}\r\n                            size='small'\r\n                            type=\"danger\"\r\n                            disabled={this.state.selectedPublicKeys.length===0}\r\n                        >\r\n                            禁止所选\r\n                        </Button>\r\n                        <Button\r\n                            onClick={this.reForbidAll}\r\n                            size='small'\r\n                            type=\"primary\"\r\n                            disabled={this.state.selectedForbidKeys.length===0}\r\n                        >\r\n                            解禁所选\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    this.state.dataSource &&\r\n                    <Table\r\n                        columns={this.state.columns}\r\n                        dataSource={this.state.dataSource}\r\n                        scroll={{ x: 1295 }}\r\n                        size='small'\r\n                        rowSelection={{\r\n                            selectedRowKeys:this.state.selectedRowKeys,\r\n                            onChange:this.selectChange,\r\n                            renderCell:this.renderCell,\r\n                        }}\r\n                        onChange={this.tableChange}\r\n                        pagination={{\r\n                            current:this.state.current,\r\n                            hideOnSinglePage:true,\r\n                            showSizeChanger:false,\r\n                            defaultPageSize:15,\r\n                            total:this.state.total\r\n                        }}\r\n                    />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","H:\\visual studio code\\react\\xiyuan\\admin\\src\\http\\http.js",[],["122","123"],"H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\notify\\index.jsx",[],"H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\agument\\index.jsx",["124","125","126"],"import React from 'react';\r\nimport './index.css';\r\n\r\nimport {Table, Tooltip, Button, Input, Space, Popconfirm, message, Checkbox, Modal} from 'antd';\r\n\r\nimport { SearchOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\r\n\r\nimport api from '../../http/api.js';\r\nimport Getandcopy from \"../../components/getandcopy\";\r\n\r\nexport default class Agument extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            columns:[],\r\n            dataSource:null,\r\n            selectedRowKeys:[],\r\n            selectedForbidKeys:[],\r\n            selectedPublicKeys:[],\r\n            current:1,\r\n            total:0\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({\r\n            columns:this.initColumns()\r\n        });\r\n        this.serchData({page:1});\r\n    };\r\n    componentWillUnmount() {\r\n        this.setState = (state, callback) => {\r\n            return\r\n        }\r\n    }\r\n\r\n    //禁止一条评论\r\n    forbid = (id)=>{\r\n        this.forbidorre([id], '禁止');\r\n    };\r\n    //解禁一条评论\r\n    reforbid = (id)=>{\r\n        this.forbidorre([id], '发表');\r\n    };\r\n    forbidAll = ()=>{\r\n        Modal.confirm({\r\n            title: '确认禁止?',\r\n            icon: <ExclamationCircleOutlined />,\r\n            content: '确认将选择的所有评论禁止?',\r\n            okText:'确定',\r\n            onOk:() =>{\r\n                this.forbidorre(this.state.selectedRowKeys, '禁止');\r\n            },\r\n            cancelText:'取消',\r\n        });\r\n    };\r\n    reForbidAll = ()=>{\r\n        Modal.confirm({\r\n            title: '确认解禁?',\r\n            icon: <ExclamationCircleOutlined />,\r\n            content: '确认将选择的所有评论解禁?',\r\n            okText:'确定',\r\n            onOk:() =>{\r\n                this.forbidorre(this.state.selectedRowKeys, '发表');\r\n            },\r\n            cancelText:'取消',\r\n        });\r\n    };\r\n    getcounts = (callback)=>{\r\n        let selectCountArray = [];\r\n        this.state.selectedRowKeys.forEach(value=>{\r\n            let index = this.state.dataSource.findIndex(v=>v.id==value);\r\n            if (index === -1)\r\n                return;\r\n            let aindex = selectCountArray.findIndex(v=>v===this.state.dataSource[index].usercount);\r\n            if (aindex === -1){\r\n                selectCountArray.push(this.state.dataSource[index].usercount);\r\n            }\r\n        });\r\n        callback(selectCountArray.join(','));\r\n    };\r\n    //禁止和解禁某些评论\r\n    forbidorre = (ids, status)=>{\r\n        api.forbidagument(JSON.stringify({id:ids.join(','), forbid:status}))\r\n            .then(res=>res.json())\r\n            .then(data=>{\r\n                if (data.status === 1){\r\n                    let dataSource = Array.from(this.state.dataSource, value=>{\r\n                        let index = ids.findIndex(v=>v==value.id);\r\n                        if (index === -1)\r\n                            return value;\r\n                        else\r\n                            return {...value,status}\r\n                    });\r\n                    let selectedForbidKeys = [];\r\n                    let selectedPublicKeys = [];\r\n                    if (status === '禁止'){\r\n                        if (ids.length===1){\r\n                            selectedForbidKeys = [...this.state.selectedForbidKeys];\r\n                            if (this.state.selectedPublicKeys.includes(ids[0])){\r\n                                selectedForbidKeys.push(ids[0])\r\n                            }\r\n                            selectedPublicKeys = this.state.selectedPublicKeys.filter(item=>item !== ids[0]);\r\n                        }\r\n                        else {\r\n                            selectedForbidKeys = [...this.state.selectedForbidKeys, ...this.state.selectedPublicKeys];\r\n                        }\r\n                    }\r\n                    else if (status === '发表') {\r\n                        if (ids.length===1){\r\n                            selectedPublicKeys = [...this.state.selectedPublicKeys];\r\n                            if (this.state.selectedForbidKeys.includes(ids[0])){\r\n                                selectedPublicKeys.push(ids[0])\r\n                            }\r\n                            selectedForbidKeys = this.state.selectedForbidKeys.filter(item=>item !== ids[0]);\r\n                        }\r\n                        else {\r\n                            selectedPublicKeys = [...this.state.selectedForbidKeys, ...this.state.selectedPublicKeys];\r\n                        }\r\n                    }\r\n                    this.setState({\r\n                        dataSource,\r\n                        selectedForbidKeys,\r\n                        selectedPublicKeys\r\n                    });\r\n                    message.destroy();\r\n                    message.success('操作成功!');\r\n                }\r\n                else {\r\n                    message.destroy();\r\n                    message.warning('操作失败!');\r\n                }\r\n            })\r\n            .catch(error=>{\r\n                message.destroy();\r\n                message.warning('操作失败!');\r\n            });\r\n    };\r\n\r\n    //改变选中\r\n    selectChange = (e, data)=>{\r\n        let selectedForbidKeys = [];\r\n        let selectedPublicKeys = [];\r\n        data.forEach(item=>{\r\n            if (item.status === '禁止')\r\n                selectedForbidKeys.push(item.id);\r\n            else if (item.status === '发表')\r\n                selectedPublicKeys.push(item.id);\r\n        });\r\n        this.setState({\r\n            selectedRowKeys:e,\r\n            selectedForbidKeys,\r\n            selectedPublicKeys\r\n        });\r\n    };\r\n    //渲染选择框\r\n    renderCell=(checked, record, index, originNode)=>{\r\n        return <Checkbox {...originNode.props} disabled={record.status==='草稿'}/>;\r\n    };\r\n    //表的任何地方发生变化\r\n    tableChange = (pagination, filters, sorter)=>{\r\n        let config = {};\r\n        //若是改变的页数，则以改变后的为准；若不是改变的页数，则表示过滤别的，需要将页数调整为1\r\n        if (this.state.current === pagination.current)\r\n            config.page = 1;\r\n        else\r\n            config.page = pagination.current;\r\n        //看过滤的哪些有值，将有值的作为过滤条件\r\n        for (let key in filters) {\r\n            if (filters[key]) {\r\n                config[key] = filters[key][0];\r\n            }\r\n        }\r\n        //看是否需要排序\r\n        if (sorter.order){\r\n            config.orderKey = sorter.columnKey;\r\n            config.order = sorter.order==='descend'?'desc':'asc';\r\n        }\r\n        this.serchData(config);\r\n    };\r\n    //搜索数据\r\n    serchData = (config)=>{\r\n        api.getagument(config)\r\n            .then(res=>res.json())\r\n            .then(data=>{\r\n                if (data.status === 1){\r\n                    let dataSource = Array.from(data.data,v=>{\r\n                        v.key = v.id;\r\n                        v.time = (new Date(v.time)).format('yyyy-MM-dd hh:mm:ss');\r\n                        return v;\r\n                    });\r\n                    this.setState({\r\n                        dataSource,\r\n                        total:data.total,\r\n                        current:config.page\r\n                    });\r\n                }\r\n            })\r\n            .catch(error=>{});\r\n    };\r\n\r\n    //渲染评论的子评论\r\n    expandedRowRender = (record)=>{\r\n        record.childagu.forEach(value=>{\r\n            value.key = value.id;\r\n            value.time = (new Date(value.time)).format('yyyy-MM-dd hh:mm:ss');\r\n        });\r\n        return <Table\r\n            columns={this.initChildAgu()}\r\n            dataSource={record.childagu}\r\n            scroll={{ x: 715 }}\r\n            size='small'\r\n            pagination={false}\r\n        />\r\n    };\r\n    //判断是否允许展开\r\n    rowExpandable = (record)=>{\r\n        return !!record.childagu;\r\n    };\r\n    //禁止一条子评论\r\n    childforbid=(id)=>{\r\n        this.childforbidorre([id], '禁止');\r\n    };\r\n    //解禁一条子评论\r\n    childreforbid=(id)=>{\r\n        this.childforbidorre([id], '发表');\r\n    };\r\n    //禁止和解禁某些子评论\r\n    childforbidorre = (ids, status)=>{\r\n        api.forbidchildagu(JSON.stringify({id:ids.join(','), forbid:status}))\r\n            .then(res=>res.json())\r\n            .then(data=>{\r\n                if (data.status === 1){\r\n                    let childIndex = -1;\r\n                    let dataSource = Array.from(this.state.dataSource, value=>{\r\n                        let index = ids.findIndex(v=>{\r\n                            if (!value.childagu)\r\n                                return false;\r\n                            childIndex = value.childagu.findIndex(item=>item.id==v);\r\n                            return childIndex !== -1;\r\n                        });\r\n                        if (index === -1)\r\n                            return value;\r\n                        else\r\n                            return {...value,childagu:[...value.childagu.slice(0,childIndex),{...value.childagu[childIndex],status},...value.childagu.slice(childIndex+1)]}\r\n                    });\r\n                    this.setState({\r\n                        dataSource\r\n                    });\r\n                    message.destroy();\r\n                    message.success('操作成功!');\r\n                }\r\n                else {\r\n                    message.destroy();\r\n                    message.warning('操作失败!');\r\n                }\r\n            })\r\n            .catch(error=>{\r\n                message.destroy();\r\n                message.warning('操作失败!');\r\n            });\r\n    };\r\n\r\n    //自定义过滤方式和图标等\r\n    getColumnSearchProps = title => ({\r\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n            <div style={{ padding: 8 }}>\r\n                <Input\r\n                    ref={node => {\r\n                        this.searchInput = node;\r\n                    }}\r\n                    placeholder={`搜索 ${title}`}\r\n                    value={selectedKeys[0]}\r\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n                    onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\r\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n                />\r\n                <Space>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        onClick={() => this.handleSearch(selectedKeys, confirm)}\r\n                        icon={<SearchOutlined />}\r\n                        size=\"small\"\r\n                        style={{ width: 90 }}\r\n                    >\r\n                        搜索\r\n                    </Button>\r\n                    <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n                        重置\r\n                    </Button>\r\n                </Space>\r\n            </div>\r\n        ),\r\n        filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n        onFilterDropdownVisibleChange: visible => {\r\n            if (visible) {\r\n                setTimeout(() => this.searchInput.select(), 100);\r\n            }\r\n        },\r\n    });\r\n    handleSearch = (selectedKeys, confirm) => {\r\n        confirm();\r\n    };\r\n    handleReset = clearFilters => {\r\n        clearFilters();\r\n    };\r\n\r\n    //初始化列名\r\n    initColumns = ()=>{\r\n        let columns = [\r\n            {\r\n                title: 'ID',\r\n                width: 100,\r\n                dataIndex: 'id',\r\n                key: 'id',\r\n                fixed: 'left',\r\n            },\r\n            {\r\n                title: '文章ID',\r\n                width: 100,\r\n                dataIndex: 'pageid',\r\n                key: 'pageid',\r\n                fixed: 'left',\r\n                ...this.getColumnSearchProps('文章ID'),\r\n            },\r\n            {\r\n                title: '发表人',\r\n                width: 100,\r\n                dataIndex: 'usercount',\r\n                key: 'usercount',\r\n                ...this.getColumnSearchProps('发表人'),\r\n            },\r\n            {\r\n                title: '内容',\r\n                width: 200,\r\n                dataIndex: 'content',\r\n                key: 'content',\r\n                ellipsis: {\r\n                    showTitle: false,\r\n                },\r\n                render: content => (\r\n                    <Tooltip placement=\"topLeft\" title={content}>\r\n                        {content}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: '发表时间',\r\n                width: 150,\r\n                dataIndex: 'time',\r\n                key: 'time',\r\n                sorter:true,\r\n                defaultSortOrder:'descend',\r\n                showSorterTooltip:false,\r\n            },\r\n            {\r\n                title: '状态',\r\n                width: 100,\r\n                dataIndex: 'status',\r\n                key: 'status',\r\n                ...this.getColumnSearchProps('状态'),\r\n            },\r\n            {\r\n                title: '操作',\r\n                key: 'action',\r\n                width: 65,\r\n                render: (text, record) => (\r\n                    record.status==='禁止'?\r\n                        <Popconfirm\r\n                            title=\"确认解禁该评论?\"\r\n                            onConfirm={() => this.reforbid(record.key)}\r\n                            cancelText='取消'\r\n                            okText='确定'\r\n                        >\r\n                            <Button\r\n                                size='small'\r\n                                type='primary'\r\n                            >解禁</Button>\r\n                        </Popconfirm>\r\n                        :\r\n                        <Popconfirm\r\n                            title=\"确认禁止该评论?\"\r\n                            onConfirm={() => this.forbid(record.key)}\r\n                            cancelText='取消'\r\n                            okText='确定'\r\n                        >\r\n                            <Button\r\n                                size='small'\r\n                                type='danger'\r\n                            >禁止</Button>\r\n                        </Popconfirm>\r\n                ),\r\n                fixed:'right'\r\n            },\r\n        ];\r\n        return columns;\r\n    };\r\n    //初始化子评论的烈面\r\n    initChildAgu = ()=>{\r\n        let columns = [\r\n            {\r\n                title: 'ID',\r\n                width: 100,\r\n                dataIndex: 'id',\r\n                key: 'id',\r\n                fixed: 'left',\r\n            },\r\n            {\r\n                title: '发表人',\r\n                width: 100,\r\n                dataIndex: 'usercount',\r\n                key: 'usercount',\r\n            },\r\n            {\r\n                title: '内容',\r\n                width: 200,\r\n                dataIndex: 'content',\r\n                key: 'content',\r\n                ellipsis: {\r\n                    showTitle: false,\r\n                },\r\n                render: content => (\r\n                    <Tooltip placement=\"topLeft\" title={content}>\r\n                        {content}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: '发表时间',\r\n                width: 150,\r\n                dataIndex: 'time',\r\n                key: 'time',\r\n            },\r\n            {\r\n                title: '状态',\r\n                width: 100,\r\n                dataIndex: 'status',\r\n                key: 'status',\r\n            },\r\n            {\r\n                title: '操作',\r\n                key: 'action',\r\n                width: 65,\r\n                render: (text, record) => (\r\n                    record.status==='禁止'?\r\n                        <Popconfirm\r\n                            title=\"确认解禁该子评论?\"\r\n                            onConfirm={() => this.childreforbid(record.key)}\r\n                            cancelText='取消'\r\n                            okText='确定'\r\n                        >\r\n                            <Button\r\n                                size='small'\r\n                                type='primary'\r\n                            >解禁</Button>\r\n                        </Popconfirm>\r\n                        :\r\n                        <Popconfirm\r\n                            title=\"确认禁止该子评论?\"\r\n                            onConfirm={() => this.childforbid(record.key)}\r\n                            cancelText='取消'\r\n                            okText='确定'\r\n                        >\r\n                            <Button\r\n                                size='small'\r\n                                type='danger'\r\n                            >禁止</Button>\r\n                        </Popconfirm>\r\n                ),\r\n                fixed:'right'\r\n            },\r\n        ];\r\n        return columns;\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='btn-box'>\r\n                    <Getandcopy\r\n                        getcontent={this.getcounts}\r\n                        disabled={this.state.selectedRowKeys.length===0}\r\n                        btntext='获取所选账户'\r\n                    />\r\n                    <div>\r\n                        <Button\r\n                            onClick={this.forbidAll}\r\n                            size='small'\r\n                            type=\"danger\"\r\n                            disabled={this.state.selectedPublicKeys.length===0}\r\n                        >\r\n                            禁止所选\r\n                        </Button>\r\n                        <Button\r\n                            onClick={this.reForbidAll}\r\n                            size='small'\r\n                            type=\"primary\"\r\n                            disabled={this.state.selectedForbidKeys.length===0}\r\n                        >\r\n                            解禁所选\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    this.state.dataSource &&\r\n                    <Table\r\n                        columns={this.state.columns}\r\n                        dataSource={this.state.dataSource}\r\n                        scroll={{ x: 815 }}\r\n                        size='small'\r\n                        rowSelection={{\r\n                            selectedRowKeys:this.state.selectedRowKeys,\r\n                            onChange:this.selectChange,\r\n                            renderCell:this.renderCell,\r\n                        }}\r\n                        expandable={{\r\n                            expandedRowRender:this.expandedRowRender,\r\n                            rowExpandable:this.rowExpandable,\r\n                        }}\r\n                        onChange={this.tableChange}\r\n                        pagination={{\r\n                            current:this.state.current,\r\n                            hideOnSinglePage:true,\r\n                            showSizeChanger:false,\r\n                            defaultPageSize:15,\r\n                            total:this.state.total\r\n                        }}\r\n                    />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}",["127","128"],"H:\\visual studio code\\react\\xiyuan\\admin\\src\\http\\api.js",[],"H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\statistic\\index.jsx",[],"H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\feedback\\index.jsx",["129","130"],"import React from 'react';\r\nimport './index.css';\r\n\r\nimport {Table, Tooltip, Button, Input, Space, Popconfirm, message, Modal} from 'antd';\r\nimport { SearchOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\r\n\r\nimport Getandcopy from '../../components/getandcopy';\r\n\r\nimport api from '../../http/api.js';\r\n\r\nexport default class Feedback extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            columns:[],\r\n            dataSource:null,\r\n            selectedRowKeys:[],\r\n            selectedNoResolve:[],\r\n            current:1,\r\n            total:0,\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({\r\n            columns:this.initColumns()\r\n        });\r\n        this.serchData({page:1});\r\n    };\r\n    componentWillUnmount() {\r\n        this.setState = (state, callback) => {\r\n            return\r\n        }\r\n    }\r\n\r\n    resovled = (id)=>{\r\n        this.resovledto([id], '已解决');\r\n    };\r\n    resovledAll = ()=>{\r\n        Modal.confirm({\r\n            title: '确认已解决?',\r\n            icon: <ExclamationCircleOutlined />,\r\n            content: '确认将选择的所有标记为已解决?',\r\n            okText:'确定',\r\n            onOk:() =>{\r\n                this.resovledto(this.state.selectedNoResolve, '已解决');\r\n            },\r\n            cancelText:'取消',\r\n        });\r\n    };\r\n    getcounts = (callback)=>{\r\n        let selectCountArray = [];\r\n        this.state.selectedRowKeys.forEach(value=>{\r\n            let index = this.state.dataSource.findIndex(v=>v.id==value);\r\n            if (index === -1)\r\n                return;\r\n            let aindex = selectCountArray.findIndex(v=>v===this.state.dataSource[index].usercount);\r\n            if (aindex === -1){\r\n                selectCountArray.push(this.state.dataSource[index].usercount);\r\n            }\r\n        });\r\n        callback(selectCountArray.join(','));\r\n    };\r\n    //禁止和解禁某些文章\r\n    resovledto = (ids, status)=>{\r\n        let admin = JSON.parse(sessionStorage.getItem('admin'));\r\n        api.resovlefeedback(JSON.stringify({admincount:admin.count, id:ids.join(','), status}))\r\n            .then(res=>res.json())\r\n            .then(data=>{\r\n                if (data.status === 1){\r\n                    let dataSource = Array.from(this.state.dataSource, value=>{\r\n                        let index = ids.findIndex(v=>v==value.id);\r\n                        if (index === -1)\r\n                            return value;\r\n                        else\r\n                            return {...value,status, ...data.data}\r\n                    });\r\n                    let selectedNoResolve = [];\r\n                    if (ids.length===1){\r\n                        selectedNoResolve = this.state.selectedNoResolve.filter(item=>item !== ids[0]);\r\n                    }\r\n                    this.setState({\r\n                        dataSource,\r\n                        selectedNoResolve\r\n                    });\r\n                    message.destroy();\r\n                    message.success('操作成功!');\r\n                }\r\n                else {\r\n                    message.destroy();\r\n                    message.warning('操作失败!');\r\n                }\r\n            })\r\n            .catch(error=>{\r\n                message.destroy();\r\n                message.warning('操作失败!');\r\n            });\r\n    };\r\n\r\n    //改变选中\r\n    selectChange = (e, data)=>{\r\n        let selectedNoResolve = [];\r\n        data.forEach(item=>{\r\n            if (item.status === '待解决')\r\n                selectedNoResolve.push(item.id);\r\n        });\r\n        this.setState({\r\n            selectedRowKeys:e,\r\n            selectedNoResolve\r\n        });\r\n    };\r\n    //表的任何地方发生变化\r\n    tableChange = (pagination, filters, sorter)=>{\r\n        let config = {};\r\n        //若是改变的页数，则以改变后的为准；若不是改变的页数，则表示过滤别的，需要将页数调整为1\r\n        if (this.state.current === pagination.current)\r\n            config.page = 1;\r\n        else\r\n            config.page = pagination.current;\r\n        //看过滤的哪些有值，将有值的作为过滤条件\r\n        for (let key in filters) {\r\n            if (filters[key]) {\r\n                if (key === 'type'){\r\n                    let valueArray = filters[key][0].replace(/，/g,',').split(',');\r\n                    valueArray = Array.from(valueArray, v=>this.ctoe(v));\r\n                    config[key] = valueArray.join(',');\r\n                }\r\n                else\r\n                    config[key] = filters[key][0];\r\n            }\r\n        }\r\n        //看是否需要排序\r\n        if (sorter.order){\r\n            config.orderKey = sorter.columnKey;\r\n            config.order = sorter.order==='descend'?'desc':'asc';\r\n        }\r\n        this.serchData(config);\r\n    };\r\n    //搜索数据\r\n    serchData = (config)=>{\r\n        api.getfeedback(config)\r\n            .then(res=>res.json())\r\n            .then(data=>{\r\n                if (data.status === 1){\r\n                    let dataSource = Array.from(data.data,v=>{\r\n                        v.key = v.id;\r\n                        v.sendtime = (new Date(v.sendtime)).format('yyyy-MM-dd hh:mm:ss');\r\n                        if (v.resovletime)\r\n                            v.resovletime = (new Date(v.resovletime)).format('yyyy-MM-dd hh:mm:ss');\r\n                        v.type = this.etoc(v.type);\r\n                        return v;\r\n                    });\r\n                    this.setState({\r\n                        dataSource,\r\n                        total:data.total,\r\n                        current:config.page\r\n                    });\r\n                }\r\n            })\r\n            .catch(error=>{});\r\n    };\r\n\r\n    //转化类型\r\n    etoc = (e)=>{\r\n        let c = '';\r\n        switch (e) {\r\n            case 'problem':\r\n                c = '网站问题';\r\n                break;\r\n            case 'error':\r\n                c = '错误禁止';\r\n                break;\r\n            case 'advise':\r\n                c = '发展建议';\r\n                break;\r\n            default:\r\n                c=e;\r\n                break;\r\n        }\r\n        return c;\r\n    };\r\n    ctoe = (c)=>{\r\n        let e = '';\r\n        switch (c) {\r\n            case '网站问题':\r\n                e = 'problem';\r\n                break;\r\n            case '错误禁止':\r\n                e = 'error';\r\n                break;\r\n            case '发展建议':\r\n                e = 'advise';\r\n                break;\r\n            default:\r\n                e=c;\r\n                break;\r\n        }\r\n        return e;\r\n    };\r\n\r\n    //自定义过滤方式和图标等\r\n    getColumnSearchProps = title => ({\r\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n            <div style={{ padding: 8 }}>\r\n                <Input\r\n                    ref={node => {\r\n                        this.searchInput = node;\r\n                    }}\r\n                    placeholder={`搜索 ${title}`}\r\n                    value={selectedKeys[0]}\r\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n                    onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\r\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n                />\r\n                <Space>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        onClick={() => this.handleSearch(selectedKeys, confirm)}\r\n                        icon={<SearchOutlined />}\r\n                        size=\"small\"\r\n                        style={{ width: 90 }}\r\n                    >\r\n                        搜索\r\n                    </Button>\r\n                    <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n                        重置\r\n                    </Button>\r\n                </Space>\r\n            </div>\r\n        ),\r\n        filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n        onFilterDropdownVisibleChange: visible => {\r\n            if (visible) {\r\n                setTimeout(() => this.searchInput.select(), 100);\r\n            }\r\n        },\r\n    });\r\n    handleSearch = (selectedKeys, confirm) => {\r\n        confirm();\r\n    };\r\n    handleReset = clearFilters => {\r\n        clearFilters();\r\n    };\r\n\r\n    //初始化列名\r\n    initColumns = ()=>{\r\n        let columns = [\r\n            {\r\n                title: 'ID',\r\n                width: 100,\r\n                dataIndex: 'id',\r\n                key: 'id',\r\n                fixed: 'left',\r\n            },\r\n            {\r\n                title: '发表人',\r\n                width: 100,\r\n                dataIndex: 'usercount',\r\n                key: 'usercount',\r\n                ...this.getColumnSearchProps('发表人'),\r\n            },\r\n            {\r\n                title: '类型',\r\n                width: 100,\r\n                dataIndex: 'type',\r\n                key: 'type',\r\n                ...this.getColumnSearchProps('发表人'),\r\n            },\r\n            {\r\n                title: '内容',\r\n                width: 150,\r\n                dataIndex: 'content',\r\n                key: 'content',\r\n                ellipsis: {\r\n                    showTitle: false,\r\n                },\r\n                render: content => (\r\n                    <Tooltip placement=\"topLeft\" title={content}>\r\n                        {content}\r\n                    </Tooltip>\r\n                ),\r\n            },\r\n            {\r\n                title: '状态',\r\n                width: 100,\r\n                dataIndex: 'status',\r\n                key: 'status',\r\n                ...this.getColumnSearchProps('状态'),\r\n            },\r\n            {\r\n                title: '发表时间',\r\n                width: 150,\r\n                dataIndex: 'sendtime',\r\n                key: 'sendtime',\r\n                sorter:true,\r\n                defaultSortOrder:'descend',\r\n                showSorterTooltip:false,\r\n            },\r\n            {\r\n                title: '处理人',\r\n                width: 100,\r\n                dataIndex: 'admincount',\r\n                key: 'admincount',\r\n                ...this.getColumnSearchProps('处理人'),\r\n            },\r\n            {\r\n                title: '处理时间',\r\n                width: 150,\r\n                dataIndex: 'resovletime',\r\n                key: 'resovletime',\r\n                sorter:true,\r\n                showSorterTooltip:false,\r\n            },\r\n            {\r\n                title: '操作',\r\n                key: 'action',\r\n                width: 65,\r\n                render: (text, record) => (\r\n                    record.status==='待解决'&&\r\n                        <Popconfirm\r\n                            title=\"确认标记为已解决?\"\r\n                            onConfirm={() => this.resovled(record.key)}\r\n                            cancelText='取消'\r\n                            okText='确定'\r\n                        >\r\n                            <Button\r\n                                size='small'\r\n                                type='primary'\r\n                            >已解决</Button>\r\n                        </Popconfirm>\r\n                ),\r\n                fixed:'right'\r\n            },\r\n        ];\r\n        return columns;\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='btn-box'>\r\n                    <Getandcopy\r\n                        getcontent={this.getcounts}\r\n                        disabled={this.state.selectedRowKeys.length===0}\r\n                        btntext='获取所选账户'\r\n                    />\r\n                    <div>\r\n                        <Button\r\n                            onClick={this.resovledAll}\r\n                            size='small'\r\n                            type=\"primary\"\r\n                            disabled={this.state.selectedNoResolve.length===0}\r\n                        >\r\n                            标记所选\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    this.state.dataSource &&\r\n                    <Table\r\n                        columns={this.state.columns}\r\n                        dataSource={this.state.dataSource}\r\n                        scroll={{ x: 1015 }}\r\n                        size='small'\r\n                        rowSelection={{\r\n                            selectedRowKeys:this.state.selectedRowKeys,\r\n                            onChange:this.selectChange,\r\n                        }}\r\n                        onChange={this.tableChange}\r\n                        pagination={{\r\n                            current:this.state.current,\r\n                            hideOnSinglePage:true,\r\n                            showSizeChanger:false,\r\n                            defaultPageSize:15,\r\n                            total:this.state.total\r\n                        }}\r\n                    />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}",["131","132"],"H:\\visual studio code\\react\\xiyuan\\admin\\src\\components\\getandcopy\\index.jsx",[],"H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\adminusers\\index.jsx",["133","134"],"import React from 'react';\r\nimport './index.css';\r\n\r\nimport {Table, Button, Input, Space, Popconfirm, message, Modal } from 'antd';\r\nimport { SearchOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\r\n\r\nimport Addadmin from './addadmin';\r\nimport {EditableRow, EditableCell} from '../../components/editable';\r\n\r\nimport api from '../../http/api.js';\r\n\r\nexport default class AdminUsers extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.admin = JSON.parse(sessionStorage.getItem('admin'));\r\n        this.state = {\r\n            columns:[],\r\n            dataSource:null,\r\n            selectedRowKeys:[],\r\n            selectedForbidKeys:[],\r\n            selectedPublicKeys:[],\r\n            current:1,\r\n            total:0,\r\n            levelVisible:false,\r\n            levelText:''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({\r\n            columns:this.initColumns()\r\n        });\r\n        this.serchData({page:1});\r\n    };\r\n    componentWillUnmount() {\r\n        this.setState = (state, callback) => {\r\n            return\r\n        }\r\n    }\r\n\r\n    //禁止一篇文章\r\n    forbid = (count)=>{\r\n        this.forbidorre([count], '禁止');\r\n    };\r\n    //解禁一篇文章\r\n    reforbid = (count)=>{\r\n        this.forbidorre([count], '可使用');\r\n    };\r\n    forbidAll = ()=>{\r\n        Modal.confirm({\r\n            title: '确认禁止?',\r\n            icon: <ExclamationCircleOutlined />,\r\n            content: '确认将选择的所有管理员禁止?',\r\n            okText:'确定',\r\n            onOk:() =>{\r\n                this.forbidorre(this.state.selectedPublicKeys, '禁止');\r\n            },\r\n            cancelText:'取消',\r\n        });\r\n    };\r\n    reForbidAll = ()=>{\r\n        Modal.confirm({\r\n            title: '确认解禁?',\r\n            icon: <ExclamationCircleOutlined />,\r\n            content: '确认将选择的所有管理员解禁?',\r\n            okText:'确定',\r\n            onOk:() =>{\r\n                this.forbidorre(this.state.selectedForbidKeys, '可使用');\r\n            },\r\n            cancelText:'取消',\r\n        });\r\n    };\r\n    //禁止和解禁某些文章\r\n    forbidorre = (counts, status)=>{\r\n        api.forbidadmin(JSON.stringify({count:counts.join(','), status}))\r\n            .then(res=>res.json())\r\n            .then(data=>{\r\n                if (data.status === 1){\r\n                    let dataSource = Array.from(this.state.dataSource, value=>{\r\n                        let index = counts.findIndex(v=>v==value.count);\r\n                        if (index === -1)\r\n                            return value;\r\n                        else\r\n                            return {...value,status}\r\n                    });\r\n                    let selectedForbidKeys = [];\r\n                    let selectedPublicKeys = [];\r\n                    if (status === '禁止'){\r\n                        if (counts.length===1){\r\n                            selectedForbidKeys = [...this.state.selectedForbidKeys];\r\n                            if (this.state.selectedPublicKeys.includes(counts[0])){\r\n                                selectedForbidKeys.push(counts[0])\r\n                            }\r\n                            selectedPublicKeys = this.state.selectedPublicKeys.filter(item=>item !== counts[0]);\r\n                        }\r\n                        else {\r\n                            selectedForbidKeys = [...this.state.selectedForbidKeys, ...this.state.selectedPublicKeys];\r\n                        }\r\n                    }\r\n                    else if (status === '可使用') {\r\n                        if (counts.length===1){\r\n                            selectedPublicKeys = [...this.state.selectedPublicKeys];\r\n                            if (this.state.selectedForbidKeys.includes(counts[0])){\r\n                                selectedPublicKeys.push(counts[0])\r\n                            }\r\n                            selectedForbidKeys = this.state.selectedForbidKeys.filter(item=>item !== counts[0]);\r\n                        }\r\n                        else {\r\n                            selectedPublicKeys = [...this.state.selectedForbidKeys, ...this.state.selectedPublicKeys];\r\n                        }\r\n                    }\r\n                    this.setState({\r\n                        dataSource,\r\n                        selectedForbidKeys,\r\n                        selectedPublicKeys\r\n                    });\r\n                    message.destroy();\r\n                    message.success('操作成功!');\r\n                }\r\n                else {\r\n                    message.destroy();\r\n                    message.warning('操作失败!');\r\n                }\r\n            })\r\n            .catch(error=>{\r\n                message.destroy();\r\n                message.warning('操作失败!');\r\n            });\r\n    };\r\n\r\n    handleSave = (row)=>{\r\n        if (!row.level)\r\n            return;\r\n        let index = this.state.dataSource.findIndex(v=>v.count===row.count);\r\n        if (index===-1 || this.state.dataSource[index].level === row.level)\r\n            return;\r\n        Modal.confirm({\r\n            title: '确认修改等级?',\r\n            icon: <ExclamationCircleOutlined />,\r\n            content: '确认将管理员['+row.count+']的等级修改为['+row.level+']?',\r\n            okText:'确定',\r\n            onOk:() =>{\r\n                this.updateadminlevel([row.count], row.level);\r\n            },\r\n            cancelText:'取消',\r\n        });\r\n    };\r\n    updatelevel = ()=>{\r\n        this.setState({\r\n            levelVisible:true\r\n        });\r\n    };\r\n    levelOk = ()=>{\r\n        this.updateadminlevel(this.state.selectedRowKeys, this.state.levelText);\r\n    };\r\n    levelCancel = ()=>{\r\n        this.setState({\r\n            levelVisible:false\r\n        });\r\n    };\r\n    updateLevelText = (e)=>{\r\n        this.setState({\r\n            levelText:e.target.value\r\n        });\r\n    };\r\n    //修改某些管理员的等级\r\n    updateadminlevel = (counts, level)=>{\r\n        api.updateadminlevel(JSON.stringify({count:counts.join(','), level}))\r\n            .then(res=>res.json())\r\n            .then(data=>{\r\n                if (data.status === 1){\r\n                    let dataSource = Array.from(this.state.dataSource, value=>{\r\n                        let index = counts.findIndex(v=>v==value.count);\r\n                        if (index === -1)\r\n                            return value;\r\n                        else\r\n                            return {...value,level}\r\n                    });\r\n                    this.setState({\r\n                        dataSource,\r\n                        levelVisible:false\r\n                    });\r\n                    message.destroy();\r\n                    message.success('操作成功!');\r\n                }\r\n                else {\r\n                    message.destroy();\r\n                    message.warning('操作失败!');\r\n                }\r\n            })\r\n            .catch(error=>{\r\n                message.destroy();\r\n                message.warning('操作失败!');\r\n            });\r\n    };\r\n\r\n    //改变选中\r\n    selectChange = (e, data)=>{\r\n        let selectedForbidKeys = [];\r\n        let selectedPublicKeys = [];\r\n        data.forEach(item=>{\r\n            if (item.status === '禁止')\r\n                selectedForbidKeys.push(item.count);\r\n            else if (item.status === '可使用')\r\n                selectedPublicKeys.push(item.count);\r\n        });\r\n        this.setState({\r\n            selectedRowKeys:e,\r\n            selectedForbidKeys,\r\n            selectedPublicKeys\r\n        });\r\n    };\r\n    //表的任何地方发生变化\r\n    tableChange = (pagination, filters)=>{\r\n        let config = {};\r\n        //若是改变的页数，则以改变后的为准；若不是改变的页数，则表示过滤别的，需要将页数调整为1\r\n        if (this.state.current === pagination.current)\r\n            config.page = 1;\r\n        else\r\n            config.page = pagination.current;\r\n        //看过滤的哪些有值，将有值的作为过滤条件\r\n        for (let key in filters) {\r\n            if (filters[key]) {\r\n                config[key] = filters[key][0];\r\n            }\r\n        }\r\n        this.serchData(config);\r\n    };\r\n    //搜索数据\r\n    serchData = (config)=>{\r\n        api.getadminusers(config)\r\n            .then(res=>res.json())\r\n            .then(data=>{\r\n                if (data.status === 1){\r\n                    let dataSource = Array.from(data.data,v=>{\r\n                        v.key = v.count;\r\n                        return v;\r\n                    });\r\n                    this.setState({\r\n                        dataSource,\r\n                        total:data.total,\r\n                        current:config.page\r\n                    });\r\n                }\r\n            })\r\n            .catch(error=>{});\r\n    };\r\n\r\n    //自定义过滤方式和图标等\r\n    getColumnSearchProps = title => ({\r\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n            <div style={{ padding: 8 }}>\r\n                <Input\r\n                    ref={node => {\r\n                        this.searchInput = node;\r\n                    }}\r\n                    placeholder={`搜索 ${title}`}\r\n                    value={selectedKeys[0]}\r\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n                    onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\r\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n                />\r\n                <Space>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        onClick={() => this.handleSearch(selectedKeys, confirm)}\r\n                        icon={<SearchOutlined />}\r\n                        size=\"small\"\r\n                        style={{ width: 90 }}\r\n                    >\r\n                        搜索\r\n                    </Button>\r\n                    <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n                        重置\r\n                    </Button>\r\n                </Space>\r\n            </div>\r\n        ),\r\n        filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n        onFilterDropdownVisibleChange: visible => {\r\n            if (visible) {\r\n                setTimeout(() => this.searchInput.select(), 100);\r\n            }\r\n        },\r\n    });\r\n    handleSearch = (selectedKeys, confirm) => {\r\n        confirm();\r\n    };\r\n    handleReset = clearFilters => {\r\n        clearFilters();\r\n    };\r\n\r\n    //添加管理员\r\n    addadmin = ()=>{\r\n        Modal.info({\r\n            title:\"添加管理员\",\r\n            okText:'关闭',\r\n            width:800,\r\n            content:<Addadmin zchandleOk={this.zchandleOk}/>\r\n        });\r\n    };\r\n    zchandleOk = (data)=>{\r\n        if (!data.status)\r\n            data.status = '可使用';\r\n        if (!data.sex)\r\n            data.sex = '男';\r\n        if (!data.level)\r\n            data.level = 2;\r\n        data.key = data.count;\r\n        this.setState({\r\n            dataSource:[...this.state.dataSource, data]\r\n        });\r\n    };\r\n\r\n    //初始化列名\r\n    initColumns = ()=>{\r\n        let columns = [\r\n            {\r\n                title: '账户',\r\n                width: 100,\r\n                dataIndex: 'count',\r\n                key: 'count',\r\n                fixed:'left',\r\n                ...this.getColumnSearchProps('账户'),\r\n            },\r\n            {\r\n                title: '昵称',\r\n                width: 100,\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                ...this.getColumnSearchProps('昵称'),\r\n            },\r\n            {\r\n                title: '性别',\r\n                width: 100,\r\n                dataIndex: 'sex',\r\n                key: 'sex',\r\n                ...this.getColumnSearchProps('性别'),\r\n            },\r\n            {\r\n                title: '等级',\r\n                width: 100,\r\n                dataIndex: 'level',\r\n                key: 'level',\r\n                editable: true,\r\n                ...this.getColumnSearchProps('等级'),\r\n            },\r\n            {\r\n                title: '状态',\r\n                width: 100,\r\n                dataIndex: 'status',\r\n                key: 'status',\r\n                ...this.getColumnSearchProps('状态'),\r\n            },\r\n            {\r\n                title: '操作',\r\n                key: 'action',\r\n                width: 65,\r\n                render: (text, record) => (\r\n                    record.status==='可使用'?\r\n                        <Popconfirm\r\n                            title=\"确认禁止该管理员?\"\r\n                            onConfirm={() => this.forbid(record.key)}\r\n                            cancelText='取消'\r\n                            okText='确定'\r\n                        >\r\n                            <Button\r\n                                size='small'\r\n                                type='danger'\r\n                            >禁止</Button>\r\n                        </Popconfirm>\r\n                        :\r\n                        <Popconfirm\r\n                            title=\"确认解禁该管理员?\"\r\n                            onConfirm={() => this.reforbid(record.key)}\r\n                            cancelText='取消'\r\n                            okText='确定'\r\n                        >\r\n                            <Button\r\n                                size='small'\r\n                                type='primary'\r\n                            >解禁</Button>\r\n                        </Popconfirm>\r\n                ),\r\n                fixed:'right'\r\n            },\r\n        ];\r\n        return columns;\r\n    };\r\n    render() {\r\n        const components = {\r\n            body: {\r\n                row: EditableRow,\r\n                cell: EditableCell,\r\n            },\r\n        };\r\n        const columns = this.state.columns.map(col => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n            return {\r\n                ...col,\r\n                onCell: record => ({\r\n                    record,\r\n                    editable: col.editable,\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    handleSave: this.handleSave,\r\n                }),\r\n            };\r\n        });\r\n        return (\r\n            this.admin && this.admin.level === 1?\r\n                <div>\r\n                    <div className='btn-box'>\r\n                        <Button\r\n                            size='small'\r\n                            type=\"primary\"\r\n                            onClick={this.addadmin}\r\n                        >\r\n                            添加管理员\r\n                        </Button>\r\n                        <div>\r\n                            <Button\r\n                                onClick={this.updatelevel}\r\n                                size='small'\r\n                                type=\"primary\"\r\n                                disabled={this.state.selectedRowKeys.length===0}\r\n                            >\r\n                                修改等级\r\n                            </Button>\r\n                            <Button\r\n                                onClick={this.forbidAll}\r\n                                size='small'\r\n                                type=\"danger\"\r\n                                disabled={this.state.selectedPublicKeys.length===0}\r\n                            >\r\n                                禁止所选\r\n                            </Button>\r\n                            <Button\r\n                                onClick={this.reForbidAll}\r\n                                size='small'\r\n                                type=\"primary\"\r\n                                disabled={this.state.selectedForbidKeys.length===0}\r\n                            >\r\n                                解禁所选\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                    {\r\n                        this.state.dataSource &&\r\n                        <Table\r\n                            components={components}\r\n                            rowClassName={() => 'editable-row'}\r\n                            columns={columns}\r\n                            dataSource={this.state.dataSource}\r\n                            scroll={{ x: 565 }}\r\n                            size='small'\r\n                            rowSelection={{\r\n                                selectedRowKeys:this.state.selectedRowKeys,\r\n                                onChange:this.selectChange,\r\n                            }}\r\n                            onChange={this.tableChange}\r\n                            pagination={{\r\n                                current:this.state.current,\r\n                                hideOnSinglePage:true,\r\n                                showSizeChanger:false,\r\n                                defaultPageSize:15,\r\n                                total:this.state.total\r\n                            }}\r\n                        />\r\n                    }\r\n                    <Modal\r\n                        title=\"修改等级\"\r\n                        visible={this.state.levelVisible}\r\n                        onOk={this.levelOk}\r\n                        onCancel={this.levelCancel}\r\n                        okText='确定'\r\n                        cancelText='取消'\r\n                    >\r\n                        <p>确认将选择的所有管理员的等级修改为所输入的？</p>\r\n                        <Input\r\n                            type='number'\r\n                            value={this.state.levelText}\r\n                            onChange={this.updateLevelText}\r\n                        />\r\n                    </Modal>\r\n                </div>\r\n                :\r\n                <div>您的权限不够！</div>\r\n        );\r\n    }\r\n}","H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\adminusers\\addadmin\\index.jsx",[],"H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\admininfo\\index.jsx",["135"],"import React from 'react';\r\nimport './index.css';\r\nimport { Form, Input, Button, Radio, Upload, message, Modal } from 'antd';\r\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons'\r\n\r\nimport api from '../../http/api.js';\r\nimport Updatepassword from \"./updatepassword\";\r\n\r\nexport default class AdminInfo extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.admin = JSON.parse(sessionStorage.getItem('admin')) || {};\r\n        this.state = {\r\n            loading: false,\r\n            imageUrl:null,\r\n            user:{}\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({\r\n            imageUrl:this.admin.touxiang,\r\n            user:{...this.admin}\r\n        });\r\n    };\r\n\r\n    onFinish = (values)=>{\r\n        let userData = {\r\n            count:this.admin.count,\r\n            touxiang:this.state.imageUrl\r\n        };\r\n        for (let key in values){\r\n            if (values[key] && key !== 'touxiang'){\r\n                userData[key] = values[key];\r\n            }\r\n        }\r\n        api.updateadmin(JSON.stringify(userData))\r\n            .then(res=>res.json())\r\n            .then(data=>{\r\n                if (data.status === 1){\r\n                    message.destroy();\r\n                    message.success('修改信息成功!');\r\n                    for (let key in this.admin){\r\n                        if (userData[key]){\r\n                            this.admin[key] = userData[key];\r\n                        }\r\n                    }\r\n                    sessionStorage.setItem('admin', JSON.stringify(this.admin));\r\n                }\r\n                else {\r\n                    message.destroy();\r\n                    message.warning('修改信息失败!');\r\n                }\r\n            })\r\n            .catch(error=>{\r\n                message.destroy();\r\n                message.warning('修改信息失败!');\r\n            });\r\n    };\r\n\r\n    //处理头像\r\n    beforeUpload = (file) => {\r\n        const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\r\n        if (!isJpgOrPng) {\r\n            message.error('只能选择 JPG/PNG 格式的图片!');\r\n        }\r\n        const isLt2M = file.size / 1024 / 1024 < 20;\r\n        if (!isLt2M) {\r\n            message.error('图片大小不能超过 20MB!');\r\n        }\r\n        return isJpgOrPng && isLt2M;\r\n    };\r\n\r\n    handleChange = info => {\r\n        if (info.file.status === 'uploading') {\r\n            this.setState({ loading: true });\r\n            return;\r\n        }\r\n        if (info.file.status === 'done') {\r\n            let path = info.file.response.path;\r\n            path = '/'+path.replace(/\\\\/g,'/');\r\n            this.setState({\r\n                imageUrl: path,\r\n                loading: false\r\n            })\r\n        }\r\n    };\r\n\r\n    //修改密码\r\n    updatepassword = ()=>{\r\n        Modal.info({\r\n            title:\"修改密码\",\r\n            okText:'关闭',\r\n            width:800,\r\n            content:<Updatepassword/>\r\n        });\r\n    };\r\n    render(){\r\n        const layout = {\r\n            labelCol: { span: 4 },\r\n            wrapperCol: { span: 20 },\r\n        };\r\n        const tailLayout = {\r\n            wrapperCol: { offset: 4, span: 20 },\r\n        };\r\n        const user = this.state.user;\r\n        this.formRef.current && this.formRef.current.setFieldsValue({\r\n            count:user.count,\r\n            name:user.name,\r\n            sex:user.sex,\r\n        });\r\n        const uploadButton = (\r\n            <div>\r\n                {this.state.loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n                <div style={{ marginTop: 8 }}>上传头像</div>\r\n            </div>\r\n        );\r\n        return(\r\n            <div>\r\n                <Form\r\n                    {...layout}\r\n                    onFinish={this.onFinish}\r\n                    ref={this.formRef}\r\n                >\r\n                    <Form.Item\r\n                        label=\"头像：\"\r\n                    >\r\n                        <Upload\r\n                            name=\"touxiang\"\r\n                            listType=\"picture-card\"\r\n                            className=\"avatar-uploader\"\r\n                            showUploadList={false}\r\n                            action=\"/admin/touxiang\"\r\n                            beforeUpload={ this.beforeUpload }\r\n                            onChange={ this.handleChange }\r\n                            accept='/image/*'\r\n                        >\r\n                            {\r\n                                this.state.imageUrl ?\r\n                                    <img\r\n                                        src={this.state.imageUrl}\r\n                                        style={{ width: '100%' }}\r\n                                    />\r\n                                    : uploadButton\r\n                            }\r\n                        </Upload>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"账户：\"\r\n                        name=\"count\"\r\n                    >\r\n                        <Input disabled/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"姓名：\"\r\n                        name=\"name\"\r\n                        rules={[{ min: 1, message: '请输入姓名!' }]}\r\n                    >\r\n                        <Input maxLength={7}/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"性别：\"\r\n                        name=\"sex\"\r\n                        rules={[{ min: 1, message: '请选择性别!'}]}\r\n                    >\r\n                        <Radio.Group>\r\n                            <Radio value='男'>男</Radio>\r\n                            <Radio value='女'>女</Radio>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item {...tailLayout}>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            修改\r\n                        </Button>\r\n                        <Button\r\n                            type=\"primary\"\r\n                            onClick={this.updatepassword}\r\n                        >\r\n                            修改密码\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}","H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\admininfo\\updatepassword\\index.jsx",[],"H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\micorapp\\index.jsx",["136","137"],"H:\\visual studio code\\react\\xiyuan\\admin\\src\\view\\micorapp\\addMicor\\index.jsx",[],"H:\\visual studio code\\react\\xiyuan\\admin\\src\\components\\editable.jsx",[],{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":2,"column":1,"nodeType":"144","messageId":"145","endLine":16,"endColumn":2},{"ruleId":"138","replacedBy":"146"},{"ruleId":"140","replacedBy":"147"},{"ruleId":"138","replacedBy":"148"},{"ruleId":"140","replacedBy":"149"},{"ruleId":"138","replacedBy":"150"},{"ruleId":"140","replacedBy":"151"},{"ruleId":"138","replacedBy":"152"},{"ruleId":"140","replacedBy":"153"},{"ruleId":"154","severity":1,"message":"155","line":72,"column":64,"nodeType":"156","messageId":"145","endLine":72,"endColumn":66},{"ruleId":"154","severity":1,"message":"155","line":85,"column":65,"nodeType":"156","messageId":"145","endLine":85,"endColumn":67},{"ruleId":"154","severity":1,"message":"155","line":96,"column":55,"nodeType":"156","messageId":"145","endLine":96,"endColumn":57},{"ruleId":"138","replacedBy":"157"},{"ruleId":"140","replacedBy":"158"},{"ruleId":"154","severity":1,"message":"155","line":72,"column":64,"nodeType":"156","messageId":"145","endLine":72,"endColumn":66},{"ruleId":"154","severity":1,"message":"155","line":89,"column":55,"nodeType":"156","messageId":"145","endLine":89,"endColumn":57},{"ruleId":"154","severity":1,"message":"155","line":239,"column":80,"nodeType":"156","messageId":"145","endLine":239,"endColumn":82},{"ruleId":"138","replacedBy":"159"},{"ruleId":"140","replacedBy":"160"},{"ruleId":"154","severity":1,"message":"155","line":54,"column":64,"nodeType":"156","messageId":"145","endLine":54,"endColumn":66},{"ruleId":"154","severity":1,"message":"155","line":72,"column":55,"nodeType":"156","messageId":"145","endLine":72,"endColumn":57},{"ruleId":"138","replacedBy":"161"},{"ruleId":"140","replacedBy":"162"},{"ruleId":"154","severity":1,"message":"155","line":80,"column":58,"nodeType":"156","messageId":"145","endLine":80,"endColumn":60},{"ruleId":"154","severity":1,"message":"155","line":173,"column":58,"nodeType":"156","messageId":"145","endLine":173,"endColumn":60},{"ruleId":"163","severity":1,"message":"164","line":141,"column":37,"nodeType":"165","endLine":144,"endColumn":39},{"ruleId":"154","severity":1,"message":"155","line":147,"column":55,"nodeType":"156","messageId":"145","endLine":147,"endColumn":57},{"ruleId":"166","severity":1,"message":"167","line":341,"column":86,"nodeType":"168","endLine":341,"endColumn":101},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],"no-extend-native","Date prototype is read only, properties should not be added.","AssignmentExpression","unexpected",["169"],["170"],["169"],["170"],["169"],["170"],["169"],["170"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression",["169"],["170"],["169"],["170"],["169"],["170"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation"]